
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftLORleftLANDleftLTGTleftPLUSMINUSleftEQleftNEleftTIMESDIVIDErightTERNARYrightDECREMENTCOLON COMMA DECREMENT DIVIDE ELSE EQ EQUALS FLOAT FOR GT ID IF INT LAND LBRACE LBRACKET LOR LPAREN LT MINUS NE NUMBER PLUS RBRACE RBRACKET RPAREN SEMICOLON STRING STRING_LITERAL TERNARY TIMES WHILEprogram : statementsstatements : statements statement\n| statementstatement : INT ID SEMICOLON\n| FLOAT ID SEMICOLON\n| STRING ID SEMICOLONstatement : ID EQUALS expression SEMICOLON\n| ID EQUALS STRING_LITERAL SEMICOLONstatement : FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN statementstatement : WHILE LPAREN expression RPAREN statementstatement : LBRACE statements RBRACEstatement : IF LPAREN expression RPAREN statement\n| IF LPAREN expression RPAREN statement ELSE statementstatement : expression SEMICOLONexpression : expression PLUS term\n| expression MINUS term\n| expression LOR term\n| expression LAND term\n| expression EQ term\n| expression NE termexpression : expression LT expression\n| expression GT expressionexpression : termterm : term TIMES factor\n| term DIVIDE factorterm : factorfactor : NUMBER\n| FLOATfactor : STRING_LITERALfactor : IDfactor : LPAREN expression RPARENexpression : ID EQUALS expressionexpression : LBRACKET elements RBRACKETelements : elements COMMA expressionelements : expressionelements : expression : ID DECREMENTstatement : ID DECREMENT SEMICOLONexpression : expression TERNARY expression COLON expression'
    
_lr_action_items = {'INT':([0,2,3,13,19,25,40,46,49,50,51,67,73,74,78,79,83,84,86,88,89,90,],[4,4,-3,4,-2,-14,4,-4,-38,-5,-6,-11,-7,-8,4,4,-10,-12,4,-13,4,-9,]),'FLOAT':([0,2,3,11,13,16,19,21,25,26,27,28,29,30,31,32,33,34,35,39,40,41,42,43,46,49,50,51,64,67,72,73,74,75,76,78,79,83,84,85,86,88,89,90,],[6,6,-3,38,6,38,-2,38,-14,38,38,38,38,38,38,38,38,38,38,38,6,38,38,38,-4,-38,-5,-6,38,-11,38,-7,-8,38,38,6,6,-10,-12,38,6,-13,6,-9,]),'STRING':([0,2,3,13,19,25,40,46,49,50,51,67,73,74,78,79,83,84,86,88,89,90,],[7,7,-3,7,-2,-14,7,-4,-38,-5,-6,-11,-7,-8,7,7,-10,-12,7,-13,7,-9,]),'ID':([0,2,3,4,6,7,11,13,16,19,21,25,26,27,28,29,30,31,32,33,34,35,39,40,41,42,43,46,49,50,51,64,67,72,73,74,75,76,78,79,83,84,85,86,88,89,90,],[5,5,-3,20,23,24,37,5,37,-2,37,-14,53,53,53,53,53,53,37,37,37,37,37,5,37,53,53,-4,-38,-5,-6,37,-11,37,-7,-8,37,37,5,5,-10,-12,37,5,-13,5,-9,]),'FOR':([0,2,3,13,19,25,40,46,49,50,51,67,73,74,78,79,83,84,86,88,89,90,],[10,10,-3,10,-2,-14,10,-4,-38,-5,-6,-11,-7,-8,10,10,-10,-12,10,-13,10,-9,]),'WHILE':([0,2,3,13,19,25,40,46,49,50,51,67,73,74,78,79,83,84,86,88,89,90,],[12,12,-3,12,-2,-14,12,-4,-38,-5,-6,-11,-7,-8,12,12,-10,-12,12,-13,12,-9,]),'LBRACE':([0,2,3,13,19,25,40,46,49,50,51,67,73,74,78,79,83,84,86,88,89,90,],[13,13,-3,13,-2,-14,13,-4,-38,-5,-6,-11,-7,-8,13,13,-10,-12,13,-13,13,-9,]),'IF':([0,2,3,13,19,25,40,46,49,50,51,67,73,74,78,79,83,84,86,88,89,90,],[14,14,-3,14,-2,-14,14,-4,-38,-5,-6,-11,-7,-8,14,14,-10,-12,14,-13,14,-9,]),'LBRACKET':([0,2,3,11,13,16,19,21,25,32,33,34,35,39,40,41,46,49,50,51,64,67,72,73,74,75,76,78,79,83,84,85,86,88,89,90,],[16,16,-3,16,16,16,-2,16,-14,16,16,16,16,16,16,16,-4,-38,-5,-6,16,-11,16,-7,-8,16,16,16,16,-10,-12,16,16,-13,16,-9,]),'NUMBER':([0,2,3,11,13,16,19,21,25,26,27,28,29,30,31,32,33,34,35,39,40,41,42,43,46,49,50,51,64,67,72,73,74,75,76,78,79,83,84,85,86,88,89,90,],[18,18,-3,18,18,18,-2,18,-14,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-4,-38,-5,-6,18,-11,18,-7,-8,18,18,18,18,-10,-12,18,18,-13,18,-9,]),'STRING_LITERAL':([0,2,3,11,13,16,19,21,25,26,27,28,29,30,31,32,33,34,35,39,40,41,42,43,46,49,50,51,64,67,72,73,74,75,76,78,79,83,84,85,86,88,89,90,],[9,9,-3,9,9,9,-2,48,-14,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,-4,-38,-5,-6,9,-11,9,-7,-8,9,9,9,9,-10,-12,9,9,-13,9,-9,]),'LPAREN':([0,2,3,10,11,12,13,14,16,19,21,25,26,27,28,29,30,31,32,33,34,35,39,40,41,42,43,46,49,50,51,64,67,72,73,74,75,76,78,79,83,84,85,86,88,89,90,],[11,11,-3,35,11,39,11,41,11,-2,11,-14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,-4,-38,-5,-6,11,-11,11,-7,-8,11,11,11,11,-10,-12,11,11,-13,11,-9,]),'$end':([1,2,3,19,25,46,49,50,51,67,73,74,83,84,88,90,],[0,-1,-3,-2,-14,-4,-38,-5,-6,-11,-7,-8,-10,-12,-13,-9,]),'RBRACE':([3,19,25,40,46,49,50,51,67,73,74,83,84,88,90,],[-3,-2,-14,67,-4,-38,-5,-6,-11,-7,-8,-10,-12,-13,-9,]),'EQUALS':([5,37,],[21,64,]),'DECREMENT':([5,37,],[22,65,]),'TIMES':([5,6,9,15,17,18,37,38,48,52,53,54,55,56,57,58,63,69,70,],[-30,-28,-29,42,-26,-27,-30,-28,-29,42,-30,42,42,42,42,42,-31,-24,-25,]),'DIVIDE':([5,6,9,15,17,18,37,38,48,52,53,54,55,56,57,58,63,69,70,],[-30,-28,-29,43,-26,-27,-30,-28,-29,43,-30,43,43,43,43,43,-31,-24,-25,]),'SEMICOLON':([5,6,8,9,15,17,18,20,22,23,24,37,38,47,48,52,53,54,55,56,57,58,59,60,62,63,65,69,70,71,77,81,82,],[-30,-28,25,-29,-23,-26,-27,46,-37,50,51,-30,-28,73,74,-15,-30,-16,-17,-18,-19,-20,-21,-22,76,-31,-37,-24,-25,-33,-32,-39,85,]),'PLUS':([5,6,8,9,15,17,18,22,36,37,38,45,47,48,52,53,54,55,56,57,58,59,60,61,62,63,65,66,68,69,70,71,77,80,81,82,87,],[-30,-28,26,-29,-23,-26,-27,-37,26,-30,-28,26,26,-29,-15,-30,-16,-17,-18,-19,-20,26,26,26,26,-31,-37,26,26,-24,-25,-33,26,26,26,26,26,]),'MINUS':([5,6,8,9,15,17,18,22,36,37,38,45,47,48,52,53,54,55,56,57,58,59,60,61,62,63,65,66,68,69,70,71,77,80,81,82,87,],[-30,-28,27,-29,-23,-26,-27,-37,27,-30,-28,27,27,-29,-15,-30,-16,-17,-18,-19,-20,27,27,27,27,-31,-37,27,27,-24,-25,-33,27,27,27,27,27,]),'LOR':([5,6,8,9,15,17,18,22,36,37,38,45,47,48,52,53,54,55,56,57,58,59,60,61,62,63,65,66,68,69,70,71,77,80,81,82,87,],[-30,-28,28,-29,-23,-26,-27,-37,28,-30,-28,28,28,-29,-15,-30,-16,-17,-18,-19,-20,-21,-22,28,28,-31,-37,28,28,-24,-25,-33,28,28,28,28,28,]),'LAND':([5,6,8,9,15,17,18,22,36,37,38,45,47,48,52,53,54,55,56,57,58,59,60,61,62,63,65,66,68,69,70,71,77,80,81,82,87,],[-30,-28,29,-29,-23,-26,-27,-37,29,-30,-28,29,29,-29,-15,-30,-16,-17,-18,-19,-20,-21,-22,29,29,-31,-37,29,29,-24,-25,-33,29,29,29,29,29,]),'EQ':([5,6,8,9,15,17,18,22,36,37,38,45,47,48,52,53,54,55,56,57,58,59,60,61,62,63,65,66,68,69,70,71,77,80,81,82,87,],[-30,-28,30,-29,-23,-26,-27,-37,30,-30,-28,30,30,-29,-15,-30,-16,-17,-18,-19,-20,30,30,30,30,-31,-37,30,30,-24,-25,-33,30,30,30,30,30,]),'NE':([5,6,8,9,15,17,18,22,36,37,38,45,47,48,52,53,54,55,56,57,58,59,60,61,62,63,65,66,68,69,70,71,77,80,81,82,87,],[-30,-28,31,-29,-23,-26,-27,-37,31,-30,-28,31,31,-29,-15,-30,-16,-17,-18,-19,-20,31,31,31,31,-31,-37,31,31,-24,-25,-33,31,31,31,31,31,]),'LT':([5,6,8,9,15,17,18,22,36,37,38,45,47,48,52,53,54,55,56,57,58,59,60,61,62,63,65,66,68,69,70,71,77,80,81,82,87,],[-30,-28,32,-29,-23,-26,-27,-37,32,-30,-28,32,32,-29,-15,-30,-16,-17,-18,-19,-20,-21,-22,32,32,-31,-37,32,32,-24,-25,-33,32,32,32,32,32,]),'GT':([5,6,8,9,15,17,18,22,36,37,38,45,47,48,52,53,54,55,56,57,58,59,60,61,62,63,65,66,68,69,70,71,77,80,81,82,87,],[-30,-28,33,-29,-23,-26,-27,-37,33,-30,-28,33,33,-29,-15,-30,-16,-17,-18,-19,-20,-21,-22,33,33,-31,-37,33,33,-24,-25,-33,33,33,33,33,33,]),'TERNARY':([5,6,8,9,15,17,18,22,36,37,38,45,47,48,52,53,54,55,56,57,58,59,60,61,62,63,65,66,68,69,70,71,77,80,81,82,87,],[-30,-28,34,-29,-23,-26,-27,-37,34,-30,-28,34,34,-29,-15,-30,-16,-17,-18,-19,-20,34,34,34,34,-31,-37,34,34,-24,-25,-33,34,34,34,34,34,]),'RPAREN':([9,15,17,18,36,37,38,52,53,54,55,56,57,58,59,60,63,65,66,68,69,70,71,77,81,87,],[-29,-23,-26,-27,63,-30,-28,-15,-30,-16,-17,-18,-19,-20,-21,-22,-31,-37,78,79,-24,-25,-33,-32,-39,89,]),'RBRACKET':([9,15,16,17,18,37,38,44,45,52,53,54,55,56,57,58,59,60,63,65,69,70,71,77,80,81,],[-29,-23,-36,-26,-27,-30,-28,71,-35,-15,-30,-16,-17,-18,-19,-20,-21,-22,-31,-37,-24,-25,-33,-32,-34,-39,]),'COMMA':([9,15,16,17,18,37,38,44,45,52,53,54,55,56,57,58,59,60,63,65,69,70,71,77,80,81,],[-29,-23,-36,-26,-27,-30,-28,72,-35,-15,-30,-16,-17,-18,-19,-20,-21,-22,-31,-37,-24,-25,-33,-32,-34,-39,]),'COLON':([9,15,17,18,37,38,52,53,54,55,56,57,58,59,60,61,63,65,69,70,71,77,81,],[-29,-23,-26,-27,-30,-28,-15,-30,-16,-17,-18,-19,-20,-21,-22,75,-31,-37,-24,-25,-33,-32,-39,]),'ELSE':([25,46,49,50,51,67,73,74,83,84,88,90,],[-14,-4,-38,-5,-6,-11,-7,-8,-10,86,-13,-9,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,13,],[2,40,]),'statement':([0,2,13,40,78,79,86,89,],[3,19,3,19,83,84,88,90,]),'expression':([0,2,11,13,16,21,32,33,34,35,39,40,41,64,72,75,76,78,79,85,86,89,],[8,8,36,8,45,47,59,60,61,62,66,8,68,77,80,81,82,8,8,87,8,8,]),'term':([0,2,11,13,16,21,26,27,28,29,30,31,32,33,34,35,39,40,41,64,72,75,76,78,79,85,86,89,],[15,15,15,15,15,15,52,54,55,56,57,58,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'factor':([0,2,11,13,16,21,26,27,28,29,30,31,32,33,34,35,39,40,41,42,43,64,72,75,76,78,79,85,86,89,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,69,70,17,17,17,17,17,17,17,17,17,]),'elements':([16,],[44,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','sintactico.py',19),
  ('statements -> statements statement','statements',2,'p_statements','sintactico.py',23),
  ('statements -> statement','statements',1,'p_statements','sintactico.py',24),
  ('statement -> INT ID SEMICOLON','statement',3,'p_statement_declaration','sintactico.py',31),
  ('statement -> FLOAT ID SEMICOLON','statement',3,'p_statement_declaration','sintactico.py',32),
  ('statement -> STRING ID SEMICOLON','statement',3,'p_statement_declaration','sintactico.py',33),
  ('statement -> ID EQUALS expression SEMICOLON','statement',4,'p_statement_assignment','sintactico.py',37),
  ('statement -> ID EQUALS STRING_LITERAL SEMICOLON','statement',4,'p_statement_assignment','sintactico.py',38),
  ('statement -> FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN statement','statement',9,'p_statement_for','sintactico.py',42),
  ('statement -> WHILE LPAREN expression RPAREN statement','statement',5,'p_statement_while','sintactico.py',46),
  ('statement -> LBRACE statements RBRACE','statement',3,'p_statement_block','sintactico.py',50),
  ('statement -> IF LPAREN expression RPAREN statement','statement',5,'p_statement_if','sintactico.py',54),
  ('statement -> IF LPAREN expression RPAREN statement ELSE statement','statement',7,'p_statement_if','sintactico.py',55),
  ('statement -> expression SEMICOLON','statement',2,'p_statement_expression','sintactico.py',62),
  ('expression -> expression PLUS term','expression',3,'p_expression_binop','sintactico.py',66),
  ('expression -> expression MINUS term','expression',3,'p_expression_binop','sintactico.py',67),
  ('expression -> expression LOR term','expression',3,'p_expression_binop','sintactico.py',68),
  ('expression -> expression LAND term','expression',3,'p_expression_binop','sintactico.py',69),
  ('expression -> expression EQ term','expression',3,'p_expression_binop','sintactico.py',70),
  ('expression -> expression NE term','expression',3,'p_expression_binop','sintactico.py',71),
  ('expression -> expression LT expression','expression',3,'p_expression_comparison','sintactico.py',75),
  ('expression -> expression GT expression','expression',3,'p_expression_comparison','sintactico.py',76),
  ('expression -> term','expression',1,'p_expression_term','sintactico.py',80),
  ('term -> term TIMES factor','term',3,'p_term_binop','sintactico.py',84),
  ('term -> term DIVIDE factor','term',3,'p_term_binop','sintactico.py',85),
  ('term -> factor','term',1,'p_term_factor','sintactico.py',89),
  ('factor -> NUMBER','factor',1,'p_factor_num','sintactico.py',93),
  ('factor -> FLOAT','factor',1,'p_factor_num','sintactico.py',94),
  ('factor -> STRING_LITERAL','factor',1,'p_factor_string','sintactico.py',98),
  ('factor -> ID','factor',1,'p_factor_id','sintactico.py',102),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_expr','sintactico.py',106),
  ('expression -> ID EQUALS expression','expression',3,'p_expression_equals','sintactico.py',110),
  ('expression -> LBRACKET elements RBRACKET','expression',3,'p_expression_list','sintactico.py',114),
  ('elements -> elements COMMA expression','elements',3,'p_elements_multiple','sintactico.py',118),
  ('elements -> expression','elements',1,'p_elements_single','sintactico.py',122),
  ('elements -> <empty>','elements',0,'p_elements_empty','sintactico.py',126),
  ('expression -> ID DECREMENT','expression',2,'p_expression_decrement','sintactico.py',133),
  ('statement -> ID DECREMENT SEMICOLON','statement',3,'p_statement_decrement','sintactico.py',137),
  ('expression -> expression TERNARY expression COLON expression','expression',5,'p_expression_ternary','sintactico.py',141),
]
