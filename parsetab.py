
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftLORleftLANDleftLTGTLEGEleftPLUSMINUSleftEQNEleftTIMESDIVIDECOMMA DIVIDE ELSE EQ EQUALS FLOAT FOR GE GT ID IF INT LAND LBRACE LBRACKET LE LOR LPAREN LT MINUS NE NUMBER PLUS RBRACE RBRACKET RPAREN SEMICOLON STRING STRING_LITERAL TIMES WHILEprogram : statementsstatements : statements statement\n                  | statementstatement : INT ID SEMICOLON\n                 | FLOAT ID SEMICOLON\n                 | STRING ID SEMICOLONstatement : ID EQUALS expression SEMICOLON\n                 | ID EQUALS STRING_LITERAL SEMICOLONstatement : FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN statementstatement : WHILE LPAREN expression RPAREN statementstatement : LBRACE statements RBRACEstatement : IF LPAREN expression RPAREN statement\n                 | IF LPAREN expression RPAREN statement ELSE statementstatement : expression SEMICOLONexpression : expression PLUS term\n                  | expression MINUS term\n                  | expression LOR term\n                  | expression LAND term\n                  | expression EQ term\n                  | expression NE termexpression : expression LT expression\n                  | expression GT expression\n                  | expression LE expression\n                  | expression GE expressionexpression : termterm : term TIMES factor\n            | term DIVIDE factorterm : factorfactor : NUMBER\n              | FLOATfactor : STRING_LITERALfactor : IDfactor : LPAREN expression RPARENexpression : ID EQUALS expressionexpression : LBRACKET elements RBRACKETelements : elements COMMA expressionelements : expressionelements : '
    
_lr_action_items = {'INT':([0,2,3,13,19,24,40,46,49,50,66,72,73,76,77,80,81,83,85,86,87,],[4,4,-3,4,-2,-14,4,-4,-5,-6,-11,-7,-8,4,4,-10,-12,4,-13,4,-9,]),'FLOAT':([0,2,3,11,13,16,19,21,24,25,26,27,28,29,30,31,32,33,34,35,39,40,41,42,43,46,49,50,64,66,71,72,73,74,76,77,80,81,82,83,85,86,87,],[6,6,-3,38,6,38,-2,38,-14,38,38,38,38,38,38,38,38,38,38,38,38,6,38,38,38,-4,-5,-6,38,-11,38,-7,-8,38,6,6,-10,-12,38,6,-13,6,-9,]),'STRING':([0,2,3,13,19,24,40,46,49,50,66,72,73,76,77,80,81,83,85,86,87,],[7,7,-3,7,-2,-14,7,-4,-5,-6,-11,-7,-8,7,7,-10,-12,7,-13,7,-9,]),'ID':([0,2,3,4,6,7,11,13,16,19,21,24,25,26,27,28,29,30,31,32,33,34,35,39,40,41,42,43,46,49,50,64,66,71,72,73,74,76,77,80,81,82,83,85,86,87,],[5,5,-3,20,22,23,37,5,37,-2,37,-14,52,52,52,52,52,52,37,37,37,37,37,37,5,37,52,52,-4,-5,-6,37,-11,37,-7,-8,37,5,5,-10,-12,37,5,-13,5,-9,]),'FOR':([0,2,3,13,19,24,40,46,49,50,66,72,73,76,77,80,81,83,85,86,87,],[10,10,-3,10,-2,-14,10,-4,-5,-6,-11,-7,-8,10,10,-10,-12,10,-13,10,-9,]),'WHILE':([0,2,3,13,19,24,40,46,49,50,66,72,73,76,77,80,81,83,85,86,87,],[12,12,-3,12,-2,-14,12,-4,-5,-6,-11,-7,-8,12,12,-10,-12,12,-13,12,-9,]),'LBRACE':([0,2,3,13,19,24,40,46,49,50,66,72,73,76,77,80,81,83,85,86,87,],[13,13,-3,13,-2,-14,13,-4,-5,-6,-11,-7,-8,13,13,-10,-12,13,-13,13,-9,]),'IF':([0,2,3,13,19,24,40,46,49,50,66,72,73,76,77,80,81,83,85,86,87,],[14,14,-3,14,-2,-14,14,-4,-5,-6,-11,-7,-8,14,14,-10,-12,14,-13,14,-9,]),'LBRACKET':([0,2,3,11,13,16,19,21,24,31,32,33,34,35,39,40,41,46,49,50,64,66,71,72,73,74,76,77,80,81,82,83,85,86,87,],[16,16,-3,16,16,16,-2,16,-14,16,16,16,16,16,16,16,16,-4,-5,-6,16,-11,16,-7,-8,16,16,16,-10,-12,16,16,-13,16,-9,]),'NUMBER':([0,2,3,11,13,16,19,21,24,25,26,27,28,29,30,31,32,33,34,35,39,40,41,42,43,46,49,50,64,66,71,72,73,74,76,77,80,81,82,83,85,86,87,],[18,18,-3,18,18,18,-2,18,-14,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-4,-5,-6,18,-11,18,-7,-8,18,18,18,-10,-12,18,18,-13,18,-9,]),'STRING_LITERAL':([0,2,3,11,13,16,19,21,24,25,26,27,28,29,30,31,32,33,34,35,39,40,41,42,43,46,49,50,64,66,71,72,73,74,76,77,80,81,82,83,85,86,87,],[9,9,-3,9,9,9,-2,48,-14,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,-4,-5,-6,9,-11,9,-7,-8,9,9,9,-10,-12,9,9,-13,9,-9,]),'LPAREN':([0,2,3,10,11,12,13,14,16,19,21,24,25,26,27,28,29,30,31,32,33,34,35,39,40,41,42,43,46,49,50,64,66,71,72,73,74,76,77,80,81,82,83,85,86,87,],[11,11,-3,35,11,39,11,41,11,-2,11,-14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,-4,-5,-6,11,-11,11,-7,-8,11,11,11,-10,-12,11,11,-13,11,-9,]),'$end':([1,2,3,19,24,46,49,50,66,72,73,80,81,85,87,],[0,-1,-3,-2,-14,-4,-5,-6,-11,-7,-8,-10,-12,-13,-9,]),'RBRACE':([3,19,24,40,46,49,50,66,72,73,80,81,85,87,],[-3,-2,-14,66,-4,-5,-6,-11,-7,-8,-10,-12,-13,-9,]),'EQUALS':([5,37,],[21,64,]),'TIMES':([5,6,9,15,17,18,37,38,48,51,52,53,54,55,56,57,63,68,69,],[-32,-30,-31,42,-28,-29,-32,-30,-31,42,-32,42,42,42,42,42,-33,-26,-27,]),'DIVIDE':([5,6,9,15,17,18,37,38,48,51,52,53,54,55,56,57,63,68,69,],[-32,-30,-31,43,-28,-29,-32,-30,-31,43,-32,43,43,43,43,43,-33,-26,-27,]),'SEMICOLON':([5,6,8,9,15,17,18,20,22,23,37,38,47,48,51,52,53,54,55,56,57,58,59,60,61,62,63,68,69,70,75,79,],[-32,-30,24,-31,-25,-28,-29,46,49,50,-32,-30,72,73,-15,-32,-16,-17,-18,-19,-20,-21,-22,-23,-24,74,-33,-26,-27,-35,-34,82,]),'PLUS':([5,6,8,9,15,17,18,36,37,38,45,47,48,51,52,53,54,55,56,57,58,59,60,61,62,63,65,67,68,69,70,75,78,79,84,],[-32,-30,25,-31,-25,-28,-29,25,-32,-30,25,25,-31,-15,-32,-16,-17,-18,-19,-20,25,25,25,25,25,-33,25,25,-26,-27,-35,25,25,25,25,]),'MINUS':([5,6,8,9,15,17,18,36,37,38,45,47,48,51,52,53,54,55,56,57,58,59,60,61,62,63,65,67,68,69,70,75,78,79,84,],[-32,-30,26,-31,-25,-28,-29,26,-32,-30,26,26,-31,-15,-32,-16,-17,-18,-19,-20,26,26,26,26,26,-33,26,26,-26,-27,-35,26,26,26,26,]),'LOR':([5,6,8,9,15,17,18,36,37,38,45,47,48,51,52,53,54,55,56,57,58,59,60,61,62,63,65,67,68,69,70,75,78,79,84,],[-32,-30,27,-31,-25,-28,-29,27,-32,-30,27,27,-31,-15,-32,-16,-17,-18,-19,-20,-21,-22,-23,-24,27,-33,27,27,-26,-27,-35,27,27,27,27,]),'LAND':([5,6,8,9,15,17,18,36,37,38,45,47,48,51,52,53,54,55,56,57,58,59,60,61,62,63,65,67,68,69,70,75,78,79,84,],[-32,-30,28,-31,-25,-28,-29,28,-32,-30,28,28,-31,-15,-32,-16,-17,-18,-19,-20,-21,-22,-23,-24,28,-33,28,28,-26,-27,-35,28,28,28,28,]),'EQ':([5,6,8,9,15,17,18,36,37,38,45,47,48,51,52,53,54,55,56,57,58,59,60,61,62,63,65,67,68,69,70,75,78,79,84,],[-32,-30,29,-31,-25,-28,-29,29,-32,-30,29,29,-31,-15,-32,-16,-17,-18,-19,-20,29,29,29,29,29,-33,29,29,-26,-27,-35,29,29,29,29,]),'NE':([5,6,8,9,15,17,18,36,37,38,45,47,48,51,52,53,54,55,56,57,58,59,60,61,62,63,65,67,68,69,70,75,78,79,84,],[-32,-30,30,-31,-25,-28,-29,30,-32,-30,30,30,-31,-15,-32,-16,-17,-18,-19,-20,30,30,30,30,30,-33,30,30,-26,-27,-35,30,30,30,30,]),'LT':([5,6,8,9,15,17,18,36,37,38,45,47,48,51,52,53,54,55,56,57,58,59,60,61,62,63,65,67,68,69,70,75,78,79,84,],[-32,-30,31,-31,-25,-28,-29,31,-32,-30,31,31,-31,-15,-32,-16,-17,-18,-19,-20,-21,-22,-23,-24,31,-33,31,31,-26,-27,-35,31,31,31,31,]),'GT':([5,6,8,9,15,17,18,36,37,38,45,47,48,51,52,53,54,55,56,57,58,59,60,61,62,63,65,67,68,69,70,75,78,79,84,],[-32,-30,32,-31,-25,-28,-29,32,-32,-30,32,32,-31,-15,-32,-16,-17,-18,-19,-20,-21,-22,-23,-24,32,-33,32,32,-26,-27,-35,32,32,32,32,]),'LE':([5,6,8,9,15,17,18,36,37,38,45,47,48,51,52,53,54,55,56,57,58,59,60,61,62,63,65,67,68,69,70,75,78,79,84,],[-32,-30,33,-31,-25,-28,-29,33,-32,-30,33,33,-31,-15,-32,-16,-17,-18,-19,-20,-21,-22,-23,-24,33,-33,33,33,-26,-27,-35,33,33,33,33,]),'GE':([5,6,8,9,15,17,18,36,37,38,45,47,48,51,52,53,54,55,56,57,58,59,60,61,62,63,65,67,68,69,70,75,78,79,84,],[-32,-30,34,-31,-25,-28,-29,34,-32,-30,34,34,-31,-15,-32,-16,-17,-18,-19,-20,-21,-22,-23,-24,34,-33,34,34,-26,-27,-35,34,34,34,34,]),'RPAREN':([9,15,17,18,36,37,38,51,52,53,54,55,56,57,58,59,60,61,63,65,67,68,69,70,75,84,],[-31,-25,-28,-29,63,-32,-30,-15,-32,-16,-17,-18,-19,-20,-21,-22,-23,-24,-33,76,77,-26,-27,-35,-34,86,]),'RBRACKET':([9,15,16,17,18,37,38,44,45,51,52,53,54,55,56,57,58,59,60,61,63,68,69,70,75,78,],[-31,-25,-38,-28,-29,-32,-30,70,-37,-15,-32,-16,-17,-18,-19,-20,-21,-22,-23,-24,-33,-26,-27,-35,-34,-36,]),'COMMA':([9,15,16,17,18,37,38,44,45,51,52,53,54,55,56,57,58,59,60,61,63,68,69,70,75,78,],[-31,-25,-38,-28,-29,-32,-30,71,-37,-15,-32,-16,-17,-18,-19,-20,-21,-22,-23,-24,-33,-26,-27,-35,-34,-36,]),'ELSE':([24,46,49,50,66,72,73,80,81,85,87,],[-14,-4,-5,-6,-11,-7,-8,-10,83,-13,-9,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statements':([0,13,],[2,40,]),'statement':([0,2,13,40,76,77,83,86,],[3,19,3,19,80,81,85,87,]),'expression':([0,2,11,13,16,21,31,32,33,34,35,39,40,41,64,71,74,76,77,82,83,86,],[8,8,36,8,45,47,58,59,60,61,62,65,8,67,75,78,79,8,8,84,8,8,]),'term':([0,2,11,13,16,21,25,26,27,28,29,30,31,32,33,34,35,39,40,41,64,71,74,76,77,82,83,86,],[15,15,15,15,15,15,51,53,54,55,56,57,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'factor':([0,2,11,13,16,21,25,26,27,28,29,30,31,32,33,34,35,39,40,41,42,43,64,71,74,76,77,82,83,86,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,68,69,17,17,17,17,17,17,17,17,]),'elements':([16,],[44,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statements','program',1,'p_program','sintactico.py',16),
  ('statements -> statements statement','statements',2,'p_statements','sintactico.py',20),
  ('statements -> statement','statements',1,'p_statements','sintactico.py',21),
  ('statement -> INT ID SEMICOLON','statement',3,'p_statement_declaration','sintactico.py',25),
  ('statement -> FLOAT ID SEMICOLON','statement',3,'p_statement_declaration','sintactico.py',26),
  ('statement -> STRING ID SEMICOLON','statement',3,'p_statement_declaration','sintactico.py',27),
  ('statement -> ID EQUALS expression SEMICOLON','statement',4,'p_statement_assignment','sintactico.py',31),
  ('statement -> ID EQUALS STRING_LITERAL SEMICOLON','statement',4,'p_statement_assignment','sintactico.py',32),
  ('statement -> FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN statement','statement',9,'p_statement_for','sintactico.py',36),
  ('statement -> WHILE LPAREN expression RPAREN statement','statement',5,'p_statement_while','sintactico.py',40),
  ('statement -> LBRACE statements RBRACE','statement',3,'p_statement_block','sintactico.py',44),
  ('statement -> IF LPAREN expression RPAREN statement','statement',5,'p_statement_if','sintactico.py',48),
  ('statement -> IF LPAREN expression RPAREN statement ELSE statement','statement',7,'p_statement_if','sintactico.py',49),
  ('statement -> expression SEMICOLON','statement',2,'p_statement_expression','sintactico.py',53),
  ('expression -> expression PLUS term','expression',3,'p_expression_binop','sintactico.py',57),
  ('expression -> expression MINUS term','expression',3,'p_expression_binop','sintactico.py',58),
  ('expression -> expression LOR term','expression',3,'p_expression_binop','sintactico.py',59),
  ('expression -> expression LAND term','expression',3,'p_expression_binop','sintactico.py',60),
  ('expression -> expression EQ term','expression',3,'p_expression_binop','sintactico.py',61),
  ('expression -> expression NE term','expression',3,'p_expression_binop','sintactico.py',62),
  ('expression -> expression LT expression','expression',3,'p_expression_comparison','sintactico.py',66),
  ('expression -> expression GT expression','expression',3,'p_expression_comparison','sintactico.py',67),
  ('expression -> expression LE expression','expression',3,'p_expression_comparison','sintactico.py',68),
  ('expression -> expression GE expression','expression',3,'p_expression_comparison','sintactico.py',69),
  ('expression -> term','expression',1,'p_expression_term','sintactico.py',73),
  ('term -> term TIMES factor','term',3,'p_term_binop','sintactico.py',77),
  ('term -> term DIVIDE factor','term',3,'p_term_binop','sintactico.py',78),
  ('term -> factor','term',1,'p_term_factor','sintactico.py',82),
  ('factor -> NUMBER','factor',1,'p_factor_num','sintactico.py',86),
  ('factor -> FLOAT','factor',1,'p_factor_num','sintactico.py',87),
  ('factor -> STRING_LITERAL','factor',1,'p_factor_string','sintactico.py',91),
  ('factor -> ID','factor',1,'p_factor_id','sintactico.py',95),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_expr','sintactico.py',99),
  ('expression -> ID EQUALS expression','expression',3,'p_expression_equals','sintactico.py',103),
  ('expression -> LBRACKET elements RBRACKET','expression',3,'p_expression_list','sintactico.py',107),
  ('elements -> elements COMMA expression','elements',3,'p_elements_multiple','sintactico.py',111),
  ('elements -> expression','elements',1,'p_elements_single','sintactico.py',115),
  ('elements -> <empty>','elements',0,'p_elements_empty','sintactico.py',119),
]
